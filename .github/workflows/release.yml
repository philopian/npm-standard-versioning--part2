name: Auto Release
on:
  pull_request:
    types: [closed]
    branches:
      - main
permissions:
  contents: write
  pull-requests: write
jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Get release type from labels
        id: release-type
        run: |
          RELEASE_TYPE="patch"  # Default
          if ${{ contains(github.event.pull_request.labels.*.name, 'major') }}; then
            RELEASE_TYPE="major"
          elif ${{ contains(github.event.pull_request.labels.*.name, 'minor') }}; then
            RELEASE_TYPE="minor"
          fi
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
      
      - name: Fetch and merge PR commits
        run: |
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr
          git merge pr --no-ff --no-edit
      
      - name: Release with standard-version (include squash & merge commits)
        id: release
        run: |
          # Perform the version update, including all commits (squash & merge)
          npx standard-version --commit-all --release-as ${{ steps.release-type.outputs.RELEASE_TYPE }} --no-verify
          # Extract the new version from package.json for use in the next step
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      
      - name: Extract latest release notes from CHANGELOG.md
        id: changelog
        run: |
          VERSION="v${{ steps.release.outputs.NEW_VERSION }}"
          # Extract the section for the new version, skipping the first line (release commit)
          awk "/^##* \\[?${VERSION//./\\.}\\]?/ {flag=1; next} /^##* / {flag=0} flag" CHANGELOG.md > release-notes.md
          echo "::set-output name=body::$(cat release-notes.md)"

      - name: Push changes
        run: |
          git push --follow-tags origin main

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.release.outputs.NEW_VERSION }}
          release_name: Release v${{ steps.release.outputs.NEW_VERSION }}
          body: ${{ steps.changelog.outputs.body }}
          draft: false
          prerelease: false